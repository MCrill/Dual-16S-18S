# Load necessary libraries
library(phyloseq)
library(ggplot2)
library(tidyverse)
library(RColorBrewer)

# Function to read TSV files and extract unique species with error handling
get_unique_species <- function(file_path) {
  tryCatch({
    # Check if the file is a .tsv file
    if (grepl("\\.tsv$", file_path)) {
      # Read the TSV file with explicit encoding
      data <- read_delim(file_path, delim = "\t", col_names = TRUE, locale = locale(encoding = "UTF-8"), show_col_types = FALSE)
      
      # Check for parsing problems
      if (any(problems(data)$row)) {
        message(paste("Parsing issues in file:", file_path))
        print(problems(data))  # Display detailed parsing problems
      }
      
      # Split taxonomy into individual ranks and extract species
      unique_species <- data %>%
        separate(taxonomy, into = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep = ";", fill = "right") %>%
        pull(Species) %>%
        unique()
      
      return(unique_species)
    } else {
      message(sprintf("Skipping non-TSV file: %s", file_path))
      return(NULL)
    }
  }, error = function(e) {
    message(sprintf("Error reading file: %s. Error message: %s", file_path, e$message))
    return(NULL)  # Return NULL if there's an error
  })
}

# Compile a list of all unique species from all files
file_paths <- list.files("E:/MASTERS 2023/Research Project 2/Luke New Stuff/", pattern = "\\.tsv$", full.names = TRUE)
all_species <- unique(unlist(lapply(file_paths, get_unique_species), use.names = FALSE))
all_species <- all_species[!is.na(all_species)]  # Remove NA values if any

# Generate a consistent color palette based on unique species
generate_global_palette <- function(species_list) {
  n <- length(species_list)
  colors <- colorRampPalette(brewer.pal(9, "Set3"))(n)
  names(colors) <- species_list
  return(colors)
}

# Create the global color palette for species
global_species_colors <- generate_global_palette(all_species)

# Function to create phyloseq object
create_phyloseq_object <- function(file_path) {
  data <- read_delim(file_path, delim = "\t", col_names = TRUE, locale = locale(encoding = "UTF-8"), show_col_types = FALSE)
  
  tax_table <- data %>%
    separate(taxonomy, into = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep = ";", fill = "right") %>%
    mutate(across(everything(), ~replace_na(.x, "Unclassified"))) %>%
    select(Kingdom, Phylum, Class, Order, Family, Genus, Species)
  
  rownames(tax_table) <- make.unique(tax_table$Species, sep = "_")
  
  total_abundance <- sum(data$abundance)
  abundance_table <- as.matrix(data$abundance)
  abundance_table <- (abundance_table / total_abundance) * 100
  rownames(abundance_table) <- rownames(tax_table)
  colnames(abundance_table) <- basename(file_path)
  
  tax_table <- as.matrix(tax_table)
  
  physeq <- phyloseq(otu_table(abundance_table, taxa_are_rows = TRUE), tax_table(tax_table))
  return(physeq)
}

# Function to plot data at species level using the global color palette
plot_phyloseq_species <- function(physeq, output_file) {
  physeq_df <- psmelt(physeq)
  
  # Sort data by Abundance in descending order
  physeq_df <- physeq_df %>%
    arrange(desc(Abundance))
  
  # Plot using global color palette
  p <- ggplot(physeq_df, aes(x = Sample, y = Abundance, fill = Species)) +
    geom_bar(stat = "identity", color = "black", size = 0.3) +
    scale_fill_manual(values = global_species_colors) +  # Use global colors
    theme(axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5)) +
    labs(title = "Species Level Relative Abundance", y = "Relative Abundance (%)") +
    xlab("Sample")
  
  ggsave(output_file, p, width = 14, height = 12, dpi = 400)
}

# Loop over files, create phyloseq objects, and plot
for (file in file_paths) {
  try({
    physeq <- create_phyloseq_object(file)
    
    # Plot at species level
    species_output_file <- paste0(file, "_species_plot.png")
    plot_phyloseq_species(physeq, species_output_file)
  }, silent = TRUE)
}

# Output message indicating completion
message("Processing and plotting completed for all .tsv files.")
